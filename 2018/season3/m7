1.vuex使用
    基于states\fetter\mutation\action\和 modules的vue项目管理管理状态插件
---------------------------------------------------------------------------------------------
2.字符串存object key值，以后取用最好用obj[key],但仅限于取这一个子层级的值，
    所以我们引入字符串转json的一些方法
    https://segmentfault.com/a/1190000007368846
    相信大部分人都知道或者去百度检索都会得到将js中的字符串转化成json对象常见的3种方法

举例：

var str = '{"name":"小明","age":18}';

将字符串转化json对象：

var json = JSON.parse(str);
var json = eval("(" + str + ")");
var json = (new Function("return " + str))();
通过console.log()将json打印到控制台，不管是使用以上3种哪一种方法，都能在chrome控制台看到成功转化的结果：


https://blog.csdn.net/YouZi_X/article/details/80393254

在jsint中使用eval()解析json字符串转换成对象数组时，出现报错的情况，一般可以忽略。

强迫症者可以使用如下JavaScript方法解决。

//计算表达式的值
function evil(fn) {
    var Fn = Function;  //一个变量指向Function，防止有些前端编译工具报错
    return new Fn('return ' + fn)();
}
原文：https://blog.csdn.net/xundh/article/details/4
var data = eval("(" + jsondata + ")");
// 使用
var data = evil(jsondata)

---------------------------------------------------------------------------------------------
webpack的坑，在assets里声明通用js时，由于之后编译打包路径会改变，所以不能直接使用静态路径，
要靠import来动态绑定路径：

import ICONBACK_URL from '../img/icon_nav_back.png'
import ICONADD_URL from '../img/icon_nav_add.png'

export const ButtonList = { // 按钮声明与函数传入接口
  addEntry: {iconUrl: ICONCELL_URL, name: '添加分录', msg: ''}, // 这行会成功
  back: {iconUrl: '../img/icon_nav_back.png', name: '返回', msg: ''} // 这行会报错
}

---------------------------------------------------------------------------------------------
object深拷贝
开发自己的模版时遇到这个问题，obj1=obj2这种简单粗暴的复制方法，因为只是指向同一个内存地址，
所以只要一方改变另一方也会改变，

第一次尝试的解决方法是myObj = Object.assign(obj1, obj2)，也属于浅拷贝，
但能实现一层子层级的拷贝
/* entry! */
      entry_resetInit () {
        this.settlement.entryReset = Object.assign({}, this.settlement.entryEdit)
        this.bonus.entryReset = Object.assign({}, this.bonus.entryEdit)
        this.charge.entryReset = Object.assign({}, this.charge.entryEdit)
        console.log(this.settlement.entryReset)
      },

然后因为要拷贝的都是json数据，没有函数内容，所以可以放心大胆的用这个深拷贝方法
/* entry! */
      entry_resetInit () {
        this.settlement.entryReset = JSON.parse(JSON.stringify(this.settlement.entryEdit))
        this.bonus.entryReset = JSON.parse(JSON.stringify(this.bonus.entryEdit))
        this.charge.entryReset = JSON.parse(JSON.stringify(this.charge.entryEdit))
      },
---------------------------------------------------------------------------------------------
js小数处理问题：（https://www.jb51.net/article/134067.htm）

js保留两位小数方法总结
转载  更新时间：2018年01月31日 10:09:58   投稿：laozhang     我要评论

本篇文章给大家总结了js保留两位小数的各种方法以及每种方法的实例代码分析，如果大家对此有需要，一起来学习下js保留两位小数的方法吧。
本文是小编针对js保留两位小数这个大家经常遇到的经典问题整理了在各种情况下的函数写法以及遇到问题的分析，以下是全部内容：

一、我们首先从经典的“四舍五入”算法讲起
1、四舍五入的情况
var num =2.446242342;
num = num.toFixed(2); // 输出结果为 2.45

或者先利用弱类型转字符串为数字
let num = this.entrys.billweight - 0
再
num = Math.floor(num * 100) / 100



---------------------------------------------------------------------------------------------
js千位符 | js 千位分隔符 | js 金额格式化
https://blog.csdn.net/pengpengpeng85/article/details/53195618

numberFormat (num, isMoney) {
  if (!num) {
    return '-'
  }
  if (isMoney) {
    num = parseFloat(num).toFixed(2).toString().split('.')
    num[0] = num[0].replace(new RegExp('(\\d)(?=(\\d{3})+$)', 'ig'), '$1,')
    return num.join('.')
  } else {
    return num
  }
}

---------------------------------------------------------------------------------------------
当你遇到调代码本身不能解决的bug：
  当然你需要查官方文档的大幅更新变动，查issue和社区，但既然你看到这里了，这肯定已经不管用
  首先将你的运行环境(微信、企业微信)和开发组件(vue、vux、echart)升级到最新，
  然后怀疑js桥(jsdk)等网络中间部分的版本
  最后沐浴焚香，吃好喝好，等死告辞
---------------------------------------------------------------------------------------------
vue父子组件通讯：用$ref调用vue子组件方法（https://blog.csdn.net/sinat_36422236/article/details/80363983
给子组件添加ref属性然后，通过vm.$refs来调用子组件的methods中的方法或者获得data

直接看代码

子组件：
    methods:{
      childMethods() {
        alert("I am child's methods")
      }
    },


父组件： 在子组件中加上ref即可通过this.$refs.ref.method调用
<template>
  <div @click="parentMethod">
    <children ref="c1"></children>
  </div>
</template>

<script>
  import children from 'components/children/children.vue'
  export default {
    components: {      
      'children': children
    },
    methods:{
      parentMethod() {
        console.log(this.$refs.c1) //返回的是一个vue对象，可以看到所有添加ref属性的元素
        this.$refs.c1.childMethods(); 
      }
    }
  }
</script>

