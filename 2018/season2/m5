1.vue－router延迟加载部分模块
    ［index.js］原写法：
    
    import a from '@/pages/a'
    routes: [
    {
      path: '/wechat-oauth',
      name: 'wechatoauth',
      meta: {
        title: '企业微信认证'
      },
      component: a
    }

    新写法：
    component: function (resolve) {
        require(['@/pages/a'], resolve)
      }

---------------------------------------------------------------------------------------------
2.badjs-report用法（https://github.com/BetterJS/badjs-report）
    ［main.js]写法：

    import BJ_REPORT from 'badjs-report'

    // 初始化
    BJ_REPORT.init({
        id: 1, // 上报 id, 不指定 id 将不上报
        uin: localStorage.YHSP_USER_NUMBER + '-' + localStorage.YHSP_USER_NAME, // 指定用户 id, (默认已经读取 qq uin)
        delay: 1000, // 当 combo 为 true 可用，延迟多少毫秒，合并缓冲区中的上报（默认）
        url: 'https://t.my.com/badjs', // 指定上报地址
        ignore: [/Script error/i], // 忽略某个错误
        random: 1, // 抽样上报，1~0 之间数值，1为100%上报（默认 1）
        repeat: 5, // 重复上报次数(对于同一个错误超过多少次不上报)
        // 避免出现单个用户同一错误上报过多的情况
        onReport: function (id, errObj) {}, // 当上报的时候回调。 id: 上报的 id, errObj: 错误的对象
        submit: null, // 覆盖原来的上报方式，可以自行修改为 post 上报等
        ext: {}, // 扩展属性，后端做扩展处理属性。例如：存在 msid 就会分发到 monitor,
        offlineLog: false, // 是否启离线日志 [默认 false]
        offlineLogExp: 5 // 离线有效时间，默认最近5天
    })
    
    //在具体的组件里
    import axios from 'axios'
    import BJ_REPORT from 'badjs-report'

    //此处结合axios和.then()两个知识点,在项目中是用Vue.http.get和Vue.http.post,这种是vue自带axios的方法
    export default {
        getdayPriceF7 (marketId, materialId, deliveryDate, number) {
            return axios.get(BaseApi.GETDAYPRICEF7, {
            params: {
                t: Vue.prototype.accessToken,
                marketId: marketId,
                materialId: materialId,
                deliveryDate: deliveryDate,
                number: number || 0
            }
            }).then(function (response) {}, function () {
                BJ_REPORT.report('Basejs Fail to getdayPriceF7 , marketId =' + marketId + ', materialId =' + materialId + ', deliveryDate =' + deliveryDate + ', number =' + number)
            })
        }
    ｝
---------------------------------------------------------------------------------------------
3.最简单的.vue模版导出为npm包方法：见附件vue-wx-image，3个文件即可
    xxx.vue 
    index.js  
    package.json

---------------------------------------------------------------------------------------------

4.vue路由的数据推入与读出
    推入:
    pushRoute () {
        this.$router.push({
          path: '/wfmap',
          query: {billId: this.$route.query.billId}
        })
      }
    }
    读出：
    readRoute () {
      // console.log(this.$route.query.billId)
      this.billId = this.$route.query.billId
    }

---------------------------------------------------------------------------------------------

5.Object内容本身是无序的，不能像数组一样靠[1]来获取，我采取的处理方法是另外建立数组作为目录：
    let myarr = []
    for (let value in this.tipsMap) {
        myarr.push(value)
    }
    然后根据myarr[1]取到key名，再去object[key]这样查询


---------------------------------------------------------------------------------------------

6.vue的route页面切换两种：不同模版页面和同模版不同传值的页面跳转刷新
    不同模版：在method的方法下，通过push改变url
        this.$router.push({
            path: '/wfmap',
            query: {billId: this.billId, procInstId: procInstId}
        })
    

    同模版不同传值：在vue下，通过自带的监测，执行更新
        watch: {
            '$route' (to, from) {
                // 数据更新操作
                window.location.reload()
                console.log('reload')
            }
        }
    
---------------------------------------------------------------------------------------------
7.小坑：在vue项目中绑定click事件之类的event时，若是原生html自然可以 @click="xxx"
    但若要往<vue-template>绑定则需要 @click.native 否则会被router-link之类的东西误解导致无法触发
    尤其是在各种vue－ui的标签上
---------------------------------------------------------------------------------------------
8.让项目在npm run dev / npm run build时自动判断运行环境的方法：（https://www.jb51.net/article/137355.htm）
    config部分，在dev.env.js写成
        module.exports = merge(prodEnv, {
            NODE_ENV: '"development"',
            HOST: '"dev"'
        }
    在prod.env.js写成
        let HOST = process.argv.splice(2)[0] || 'prod(此处是默认的开发选项词，test也行其他也行)' 
        //截取build命令后边 --xxx的字符 用于判断 
        
        module.exports = {
            NODE_ENV: '"production"',
            HOST: '"' + HOST + '"'// 暂时默认是部署到测试服务器的配置，部署到正式服: $npm run build --prod
        }
    前置条件已经完成，然后在项目api部分可以查询到
        process.env.NODE_ENV === 'development'／production'
        process.env.HOST === 'prod'/'xxx'
    根据这些就足够配置了
   
---------------------------------------------------------------------------------------------
9.js获取手机型号和手机操作系统版本号（https://blog.csdn.net/kerryqpw/article/details/76610287）

    1、js 判断IOS版本号
    先来观察 iOS 的 User-Agent 串：
    iPhone 4.3.2 系统：
    Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5
    iPone 5.1 系统：
    Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5
    iPone 5.1.1 系统：
    Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5

    我们可以从 User-Agent 里发现一些规律：都含有“iPhone”关键词；含有用下划线分隔的系统版本号。嗯，我们可以用这两个规律来分辨出 iOS4 以上的系统。

    function gt_ios4() {
        // 判断是否 iPhone 或者 iPod
        if((navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i))) {
            // 判断系统版本号是否大于 4
            return Boolean(navigator.userAgent.match(/OS [5-9]_\d[_\d]* like Mac OS X/i));
        } else {
            return false;
        }
    }

    2、js判断手机浏览器操作系统和微信浏览器的方法
    做手机端的前端开发，少不了对手机平台的判断。如，对于app下载，就要判断在Android平台下就显示Android下载提示；在iOS平台下就显示iOS下载提示。
    今天就为大家介绍一下用js判断手机客户端平台及系统平台的方法：

    <script type="text/javascript">
    //手机端判断各个平台浏览器及操作系统平台
    function checkPlatform(){
        if(/android/i.test(navigator.userAgent)){
            document.write("This is Android'browser.");//这是Android平台下浏览器
        }
        if(/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)){
            document.write("This is iOS'browser.");//这是iOS平台下浏览器
        }
        if(/Linux/i.test(navigator.userAgent)){
            document.write("This is Linux'browser.");//这是Linux平台下浏览器
        }
        if(/Linux/i.test(navigator.platform)){
            document.write("This is Linux operating system.");//这是Linux操作系统平台
        }
        if(/MicroMessenger/i.test(navigator.userAgent)){
            document.write("This is MicroMessenger'browser.");//这是微信平台下浏览器
        }
    }
    $(document).ready(function(){
        alert(navigator.platform);
        checkPlatform();
    });
    </script>
---------------------------------------------------------------------------------------------
10.http-server本地服务器用法（https://blog.csdn.net/qq_30100043/article/details/73105362）
    具体平时会用到就是
    $ http-server -a 127.0.0.1 -p 7070

---------------------------------------------------------------------------------------------
11.无刷新改变url栏内容方法：http://caibaojian.com/pushstate.html
    history.pushState( null, null, '/test-string')

---------------------------------------------------------------------------------------------
12.字符串转16进制和url的原生转码方法（encodeURIComponent）
    https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
    
    stringToHex (str) {
    let val = ''
    for (var i = 0; i < str.length; i++) {
        if (val === '') {
        val = str.charCodeAt(i).toString(16)
        } else {
        val += ',' + str.charCodeAt(i).toString(16)
        }
    }
    return val
    }

---------------------------------------------------------------------------------------------
13.sql学习（布尔值里，1＝true， 0=其它
    1:
        SELECT
        TO_CHAR(bill.fbizdate,'yyyy-MM-dd'),
        bill.cfadminorgunitid,
        AVG(nvl(entry.cfquantity,0) ) avgqty
        FROM
            ct_dis_specialbusiness bill
            LEFT OUTER JOIN ct_bas_specialbusinesstype sbt ON bill.cfbusinesstypeid = sbt.fid
            LEFT OUTER JOIN ct_dis_specialbusinessentry entry ON bill.fid = entry.fparentid
        WHERE
            1 = 1
            AND TO_CHAR(bill.fbizdate,'yyyy-MM-dd') BETWEEN '2018-06-05' AND '2018-06-15'
            AND bill.cfbillbasestatus = 4
        GROUP BY
            TO_CHAR(bill.fbizdate,'yyyy-MM-dd'),
            bill.cfadminorgunitid
        ORDER BY
            TO_CHAR(bill.fbizdate,'yyyy-MM-dd') ASC
     
    2.
        select
        bill.cfbulkstorageorgun,
        sto.fname_l2
        from ct_dis_delivery bill
        left outer join T_ORG_Storage sto on bill.cfbulkstorageorgun = sto.fid
        where 1=1
        and bill.CFBillBaseStatus=4
        and bill.cfbulkstorageorgun is not null

---------------------------------------------------------------------------------------------
14.时间的字符串和时间戳互转换

    toTimeStamp (timeString) { // yyyy-mm-dd转时间戳
        let time = new Date(timeString)
        let timeStamp = Date.parse(time)
        console.log('timeStamp', timeStamp)
        this.timeStamp = timeStamp
        return Date(timeStamp)
    },
    toTimeString (timeStamp) { // 时间戳转yyyy-mm-dd
        let time = new Date(timeStamp)
        let timeString = time.getFullYear() + '-' + (time.getMonth() + 1) + '-' + time.getDate()
        console.log('timeString', timeString)
        this.timeString = timeString
        return timeString
    }

---------------------------------------------------------------------------------------------
15.
let arr1 = [{"originUnitName":null,"bizDate":"2017-10-02","qty":388,"avgWeight":48.2},{"originUnitName":null,"bizDate":"2017-10-06","qty":252,"avgWeight":44.44},{"originUnitName":null,"bizDate":"2017-10-02","qty":140,"avgWeight":47}]
arr1 = arr1.sort(function (a, b) { return (a.bizDate.toUpperCase() > b.bizDate.toUpperCase()) ? 1 : -1 })
var arr2 = []
arr2.push(arr1[0].bizDate)
if(arr1.length>1){
for(let i=0;i<arr1.length-1;i++){if(arr1[i].bizDate !== arr1[i+1].bizDate){arr2.push(arr1[i+1].bizDate)}}
}
var obj0 = {}
for(let i=0;i<arr1.length;i++){if(obj0[arr1[i].bizDate]){obj0[arr1[i].bizDate].push(arr1[i])}else{obj0[arr1[i].bizDate]=[arr1[i]]}}















